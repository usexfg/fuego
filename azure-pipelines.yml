trigger:
- master
- elderfire-v11

pr:
- master

variables:
  CMAKE_BUILD_TYPE: 'Release'

stages:
- stage: Build
  displayName: Build Matrix
  jobs:
  - job: Build_Matrix
    strategy:
      matrix:
        linux:
          vmImage: 'ubuntu-22.04'
          osName: 'linux'
        mac:
          vmImage: 'macos-14'
          osName: 'mac'
        windows:
          vmImage: 'windows-2022'
          osName: 'windows'
    pool:
      vmImage: $(vmImage)

    steps:
    - checkout: self

    # -------------------- Dependencies --------------------
    - script: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build pkg-config \
             libssl-dev libminiupnpc-dev libqrencode-dev libudev-dev \
             libunwind-dev liblzma-dev qtbase5-dev qtbase5-dev-tools \
             libboost-all-dev libicu-dev
      displayName: 'Install dependencies (Ubuntu)'
      condition: eq( variables['osName'], 'linux' )

    - script: |
        brew update
        brew install ninja boost qt@5 miniupnpc qrencode icu4c
        echo "BOOST_ROOT=$(brew --prefix boost)" >> $(Build.SourcesDirectory)/env.sh
        if [ -d "$(brew --prefix)/opt/icu4c" ]; then
          ICU_PREFIX="$(brew --prefix)/opt/icu4c"
        elif [ -d "$(brew --prefix)/opt/icu4c@77" ]; then
          ICU_PREFIX="$(brew --prefix)/opt/icu4c@77"
        elif [ -d "$(brew --prefix)/opt/icu4c@76" ]; then
          ICU_PREFIX="$(brew --prefix)/opt/icu4c@76"
        else
          ICU_PREFIX="$(brew --prefix icu4c)"
        fi
        echo "ICU_ROOT=$ICU_PREFIX" >> $(Build.SourcesDirectory)/env.sh
        echo "PATH=$ICU_PREFIX/bin:$PATH" >> $(Build.SourcesDirectory)/env.sh
        echo "PKG_CONFIG_PATH=$ICU_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $(Build.SourcesDirectory)/env.sh
        echo "LDFLAGS=-L$ICU_PREFIX/lib" >> $(Build.SourcesDirectory)/env.sh
        echo "CPPFLAGS=-I$ICU_PREFIX/include" >> $(Build.SourcesDirectory)/env.sh
      displayName: 'Install dependencies (macOS)'
      condition: eq( variables['osName'], 'mac' )

    - powershell: |
        choco install -y ninja
        if (-not (Test-Path "C:/vcpkg/vcpkg.exe")) {
          git clone https://github.com/Microsoft/vcpkg.git C:/vcpkg
          cd C:/vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
        }
        C:/vcpkg/vcpkg.exe install --triplet x64-windows `
          boost-filesystem boost-thread boost-date-time boost-chrono `
          boost-regex boost-serialization boost-program-options `
          boost-multi-index boost-uuid boost-asio boost-scope-exit `
          boost-format icu openssl miniupnpc
      displayName: 'Install dependencies (Windows)'
      condition: eq( variables['osName'], 'windows' )

    # -------------------- Configure --------------------
    - script: |
        cmake -S . -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
          -DBUILD_TESTS=ON \
          -DCMAKE_POLICY_DEFAULT_CMP0167=OLD
      displayName: 'Configure (Linux)'
      condition: eq( variables['osName'], 'linux' )

    - script: |
        set -e
        source $(Build.SourcesDirectory)/env.sh || true
        export PATH="$ICU_ROOT/bin:$PATH"
        export PKG_CONFIG_PATH="$ICU_ROOT/lib/pkgconfig:$PKG_CONFIG_PATH"
        export LDFLAGS="-L$ICU_ROOT/lib $LDFLAGS"
        export CPPFLAGS="-I$ICU_ROOT/include $CPPFLAGS"
        echo "Using ICU_ROOT: $ICU_ROOT"
        cmake -S . -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DBOOST_ROOT="$BOOST_ROOT" \
          -DBUILD_TESTS=ON \
          -DICU_ROOT="$ICU_ROOT" \
          -DCMAKE_PREFIX_PATH="$ICU_ROOT" \
          -DCMAKE_LIBRARY_PATH="$ICU_ROOT/lib" \
          -DCMAKE_INCLUDE_PATH="$ICU_ROOT/include" \
          -DBoost_USE_STATIC_LIBS=ON \
          -DCMAKE_POLICY_DEFAULT_CMP0167=OLD
      displayName: 'Configure (macOS)'
      condition: eq( variables['osName'], 'mac' )

    - powershell: |
        cmake -S . -B build `
          -G Ninja `
          -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) `
          -DBUILD_TESTS=ON `
          -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" `
          -DCMAKE_POLICY_DEFAULT_CMP0167=OLD
      displayName: 'Configure (Windows)'
      condition: eq( variables['osName'], 'windows' )

    # -------------------- Build --------------------
    - script: cmake --build build --parallel
      displayName: 'Build'

    # -------------------- Tests --------------------
    - script: |
        cd build
        if [ -f "CTestTestfile.cmake" ]; then
          ctest --output-on-failure --verbose
        elif [ -f "test/CTestTestfile.cmake" ]; then
          ctest --test-dir test --output-on-failure --verbose
        else
          echo "No tests configured, skipping ctest"
        fi
      displayName: 'Run tests'
      condition: succeeded()

    # -------------------- Artifacts --------------------
    - task: CopyFiles@2
      inputs:
        sourceFolder: 'build'
        contents: |
          **/fuegod*
          **/fuego-wallet-cli*
          **/walletd*
          **/optimizer*
        targetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        path: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'fuego-$(Agent.OS)-$(CMAKE_BUILD_TYPE)'
        publishLocation: 'Container'
