 name: Build check

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "*" # We don't want this to run on release
  pull_request:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-2022
    env:

      BOOST_ROOT: C:\thirdparties\boost-1.83.0

    steps:
      - uses: actions/checkout@v4

      - name: Prepare version
        shell: powershell
        id: setup
        run: |
          $os="windows"
          $xfg_version="${{ github.sha }}".SubString(0,7)
          $release_name="xfg-cli-$os-dev-$xfg_version"
          echo "release_name=${release_name}" >> $env:GITHUB_OUTPUT

      - name: Install msbuild
        uses: microsoft/setup-msbuild@v1.1


      - name: Download and Install Boost 1.83
        run: |
          $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.83.0/boost_1_83_0-msvc-14.3-64.exe"
          $OutputPath = "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\boost-installer.exe"
          curl -L $Url -o $OutputPath
          Start-Process -Wait -FilePath $OutputPath "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=C:\\thirdparties\\boost-1.83.0"
    
      - name: Build
        shell: powershell
        id: build
        run: |
          $build_folder = "build"
          $sha = "${{ github.sha }}"
          $xfg_ver = $sha.SubString(0,7)
          $release_name = "fuego-cli-win64-v$xfg_ver"
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -G "Visual Studio 17 2022" -A x64 -DBOOST_ROOT="$env:BOOST_ROOT" -DBOOST_INCLUDE_DIRS="$env:BOOST_ROOT/include" ..
          msbuild fuegoX.sln /p:Configuration=Release /m
          cd src\Release
          Compress-Archive -Path *.exe -DestinationPath "$release_name.zip"
          $sha256 = (Get-FileHash "$release_name.zip").Hash
          $asset_path = "./$build_folder/src/Release/$release_name.zip"
          mkdir "$release_name"
          cp *.exe "$release_name/"
          echo "sha256=${sha256}" >> $env:GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $env:GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $env:GITHUB_OUTPUT
          echo "xfg_version=${xfg_ver}" >> $env:GITHUB_OUTPUT
          echo "artifact_path=$build_folder/src/Release/$release_name" >> $env:GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu22:
    name: Ubuntu 22.04
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev
          build_folder="build/debug"
          xfg_ver=${GITHUB_SHA::7}
          xfg_ver_folder=$(echo $xfg_ver | sed 's/\.//g')
          release_name=fuego-cli-ubuntu-2204-dev"$xfg_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../.. -DCMAKE_BUILD_TYPE=Debug
          make -j4
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "artifact_path=$build_folder/$release_name" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu24:
    name: Ubuntu 24.04
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev
          build_folder="build/debug"
          xfg_ver=${GITHUB_SHA::7}
          xfg_ver_folder=$(echo $xfg_ver | sed 's/\.//g')
          release_name=fuego-cli-ubuntu-2404-dev"$xfg_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../.. -DCMAKE_BUILD_TYPE=Debug
          make -j4
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "artifact_path=$build_folder/$release_name" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: intel
            arch_flag: x86_64
          - os: macos-14
            arch: apple
            arch_flag: arm64
          - os: macos-15
            arch: apple
            arch_flag: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        run: |
          build_folder="build/"
          xfg_ver=${GITHUB_SHA::7}
          release_name=fuego-cli-macos-${{ matrix.arch }}-dev"$xfg_ver"

          brew install gcc boost ccache
          export CCACHE_DIR="$HOME/.cache/ccache"
          export CC="ccache clang"
          export CXX="ccache clang++"

          mkdir "$build_folder"
          cd "$build_folder"
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch_flag }} \
            -DCMAKE_C_FLAGS="-mmacosx-version-min=10.12" \
            -DCMAKE_CXX_FLAGS="-mmacosx-version-min=10.12 -Wno-unknown-warning-option"
          make -j2
          mkdir "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && strip "$f" && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          zip -r "$release_name".zip "$release_name"
          sha256=$(shasum -a 256 "$release_name".zip | awk '{print toupper($1)}')
          artifact_path="$build_folder/$release_name"
          asset_path="./$build_folder$release_name.zip"
          echo "sha256=${sha256}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
          echo "xfg_version=${xfg_ver}" >> $GITHUB_OUTPUT
          echo "artifact_path=${artifact_path}" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}-${{ matrix.os }}-${{ matrix.arch }}-${{ github.run_attempt }}-${{ github.job }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-raspberry-pi:
    name: Raspberry Pi ARM64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install ARM64 Cross-Compilation Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install Dependencies
        run: |
          sudo apt-get install -y cmake build-essential

      - name: Create Toolchain File
        run: |
          mkdir -p cmake
          cat > cmake/arm64-toolchain.cmake << 'EOF'
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR aarch64)
          set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
          set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF

      - name: Download and Build Boost for ARM64
        run: |
          BOOST_VERSION=1.72.0
          BOOST_VERSION_UNDERSCORE=${BOOST_VERSION//./_}
          BOOST_URL="https://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2/download"
          wget -c --timeout=30 --waitretry=5 --retry-connrefused \
               --retry-on-http-error=429,500,502,503,504 \
               -O boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2 \
               "https://downloads.sourceforge.net/project/boost/boost/${BOOST_VERSION}/boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2"
          file boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2 | grep 'bzip2 compressed data'
          if [ $? -ne 0 ]; then
            echo "Downloaded file is not a valid bzip2 archive"; head boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2; exit 1;
          fi
          tar -xjf boost_${BOOST_VERSION_UNDERSCORE}.tar.bz2
          cd boost_${BOOST_VERSION_UNDERSCORE}
          echo "using gcc : arm : aarch64-linux-gnu-g++ ;" > user-config.jam
          ./bootstrap.sh
          ./b2 --user-config=user-config.jam toolset=gcc-arm target-os=linux architecture=arm address-model=64 --prefix=/tmp/boost-arm64 install
          cd ..
    
      - name: Patch Boost to fix PTHREAD_STACK_MIN preprocessor issue
        run: |
          BOOST_HEADER="boost/context/posix/stack_traits.hpp"
          if grep -q '#if defined(PTHREAD_STACK_MIN) && (PTHREAD_STACK_MIN > 0)' $BOOST_HEADER; then
            sed -i 's/#if defined(PTHREAD_STACK_MIN) && (PTHREAD_STACK_MIN > 0)/#if defined(PTHREAD_STACK_MIN)/' $BOOST_HEADER
          fi

      - name: Build
        id: build
        run: |
          build_folder="build/"
          xfg_ver=${GITHUB_SHA::7}
          release_name="fuego-cli-raspberry-pi-arm64-dev$xfg_ver"
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/arm64-toolchain.cmake \
                -DBOOST_ROOT=/tmp/boost-arm64 \
                -DCMAKE_BUILD_TYPE=Debug ..
          make -j$(nproc)
          mkdir "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && aarch64-linux-gnu-strip "$f" && exeFiles+=( "$f" ); done
          cp "${exeFiles[@]}" "$release_name/"
          tar -czf "$release_name".tar.gz "$release_name"
          sha256=$(sha256sum "$release_name".tar.gz | awk '{print toupper($1)}')
          artifact_path="$build_folder/$release_name"
          asset_path="./$build_folder$release_name.tar.gz"
          echo "sha256=${sha256}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
          echo "xfg_version=${xfg_ver}" >> $GITHUB_OUTPUT
          echo "artifact_path=${artifact_path}" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

