name: Build check

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "*" # We don't want this to run on release
  pull_request:

jobs:
  build-windows:
    name: Windows
    runs-on: windows-latest
    env:
      BOOST_ROOT: C:/local/boost_1_72_0
    steps:
      - uses: actions/checkout@master

      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1.1.3

      - name: Install Boost
        shell: powershell
        run: |
          echo "${env:BOOST_ROOT}"
          $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.72.0/boost_1_72_0-msvc-14.2-64.exe"
          (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\boost.exe")
          Start-Process -Wait -FilePath "$env:TEMP\boost.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=${env:BOOST_ROOT}"

      - name: Build
        shell: powershell
        id: build
        run: |
          $build_folder = "build"
          $sha = "${{ github.sha }}"
          $xfg_ver = $sha.SubString(0,7)
          $release_name = "fuego-cli-win64-v$xfg_ver"
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -G "Visual Studio 16 2019" ..
          msbuild fuegoX.sln /p:Configuration=Release /m
          cd src\Release
          Compress-Archive -Path *.exe -DestinationPath "$release_name.zip"
          $sha256 = (Get-FileHash "$release_name.zip").Hash
          $asset_path = "./$build_folder/src/Release/$release_name.zip"
          mkdir "$release_name"
          cp *.exe "$release_name/"
          echo "sha256=${sha256}" >> $env:GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $env:GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $env:GITHUB_OUTPUT
          echo "xfg_version=${xfg_version}" >> $env:GITHUB_OUTPUT
          echo "artifact_path=$build_folder/src/Release/$release_name" >> $env:GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ubuntu20:
    name: Ubuntu 22.04
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev
          build_folder="build/debug"
          xfg_ver=${GITHUB_SHA::7}
          xfg_ver_folder=$(echo $xfg_ver | sed 's/\.//g')
          release_name=fuego-cli-ubuntu-2204-dev"$xfg_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../.. -DCMAKE_BUILD_TYPE=Debug
          make -j2
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "artifact_path=$build_folder/$release_name" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          
  build-ubuntu22:
    name: Ubuntu 24.04
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev
          build_folder="build/debug"
          xfg_ver=${GITHUB_SHA::7}
          xfg_ver_folder=$(echo $xfg_ver | sed 's/\.//g')
          release_name=fuego-cli-ubuntu-2404-dev"$xfg_ver"
          mkdir -p "$build_folder"
          cd "$build_folder"
          cmake ../.. -DCMAKE_BUILD_TYPE=Debug
          make -j2
          mkdir -p "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          echo "release_name=${release_name}.tar.gz" >> $GITHUB_OUTPUT
          echo "artifact_path=$build_folder/$release_name" >> $GITHUB_OUTPUT

      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@master

      - name: Build
        id: build
        run: |
          build_folder="build/"
          xfg_ver=${GITHUB_SHA::7}
          xfg_ver_folder=$(echo $xfg_ver | sed 's/\.//g')
          release_name=fuego-cli-macos-dev"$xfg_ver"
          brew install gcc boost
          mkdir "$build_folder"
          cd "$build_folder"
          cmake -DCMAKE_C_FLAGS="-mmacosx-version-min=10.12" -DCMAKE_CXX_FLAGS="-mmacosx-version-min=10.12" ..
          make -j2
          mkdir "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && strip "$f" && exeFiles+=( "$f" ); done
          strip "${exeFiles[@]}"
          cp "${exeFiles[@]}" "$release_name/"
          zip -r "$release_name".zip "$release_name"
          sha256=$(shasum -a 256 "$release_name".zip | awk '{print toupper($1)}')
          artifact_path="$build_folder/$release_name"
          asset_path="./$build_folder$release_name.zip"
          echo "sha256=${sha256}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
          echo "xfg_version=${xfg_version}" >> $GITHUB_OUTPUT
          echo "artifact_path=${artifact_path}" >> $GITHUB_OUTPUT


      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.release_name }}
          path: ${{ steps.build.outputs.artifact_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
