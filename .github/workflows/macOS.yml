name: macOS

on:
  push:
    tags:
      - "*"

jobs:
  build-macos:
    name: macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: intel
            arch_flag: x86_64
          - os: macos-14
            arch: apple
            arch_flag: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Build
        id: build
        run: |
          build_folder="build/"
          xfg_ver=$(echo ${{ github.ref }} | sed 's|refs/tags/||')
          release_name="fuego-cli-macOS-${{ matrix.arch }}-v$xfg_ver"
          brew install gcc boost
          # Uninstall ccache if present to avoid --D option error
          brew uninstall ccache 2>/dev/null || echo "ccache not installed via brew"
          # Completely disable ccache to avoid --D option error
          export CCACHE_DISABLE=1
          export CCACHE_DIR=""
          export CCACHE_PREFIX=""
          export CCACHE_PREFIX_CPP=""
          export CCACHE_COMPRESS=""
          export CCACHE_COMPRESSLEVEL=""
          export CCACHE_CPP2=""
          export CCACHE_HARDLINK=""
          export CCACHE_HASHDIR=""
          export CCACHE_IGNOREOPTIONS=""
          export CCACHE_LOGFILE=""
          export CCACHE_MAXSIZE=""
          export CCACHE_READONLY=""
          export CCACHE_RECACHE=""
          export CCACHE_SLOPPINESS=""
          export CCACHE_UMASK=""
          export CCACHE_VERBOSE=""
          export CC="clang"
          export CXX="clang++"
          # Remove any ccache wrapper from PATH temporarily
          export PATH=$(echo $PATH | tr ':' '\n' | grep -v ccache | tr '\n' ':' | sed 's/:$//')
          # Ensure no ccache wrapper is used
          which ccache >/dev/null 2>&1 && echo "ccache found but disabled" || echo "ccache not found"
          mkdir "$build_folder"
          cd "$build_folder"
          # Clear any existing CMake cache to avoid ccache detection
          rm -rf CMakeCache.txt CMakeFiles/ 2>/dev/null || true
          cmake -DCMAKE_C_FLAGS="-mmacosx-version-min=10.12" -DCMAKE_CXX_FLAGS="-mmacosx-version-min=10.12" -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch_flag }} -DCMAKE_C_COMPILER_LAUNCHER="" -DCMAKE_CXX_COMPILER_LAUNCHER="" ..
          make -j4
          mkdir "$release_name"
          exeFiles=()
          for f in src/*; do [[ -x $f && -f $f ]] && strip "$f" && exeFiles+=( "$f" ); done
          cp "${exeFiles[@]}" "$release_name/"
          zip -r "$release_name".zip "$release_name"
          sha256=$(shasum -a 256 "$release_name".zip | awk '{print toupper($1)}')
          asset_path="./$build_folder$release_name.zip"
          echo "sha256=${sha256}" >> $GITHUB_OUTPUT
          echo "release_name=${release_name}.zip" >> $GITHUB_OUTPUT
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
          echo "xfg_version=${xfg_ver}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.build.outputs.asset_path }}
          name: Fuego CLI Suite v${{ steps.build.outputs.xfg_version }}
          body: |
            üçè [Download for macOS](../../releases/download/${{ steps.build.outputs.xfg_version }}/${{ steps.build.outputs.release_name }}) **${{ steps.build.outputs.release_name }}**
            
            `SHA256 : ${{ steps.build.outputs.sha256 }}`
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
