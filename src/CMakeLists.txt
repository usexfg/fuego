add_definitions(-DSTATICLIB)
include_directories(${CMAKE_SOURCE_DIR}/external/parallel_hashmap)

file(GLOB_RECURSE BlockchainExplorer BlockchainExplorer/*)
file(GLOB_RECURSE Common Common/*)
file(GLOB_RECURSE Crypto crypto/*)
file(GLOB_RECURSE CryptoNoteCore CryptoNoteCore/* CryptoNoteConfig.h DynamicRingSize.cpp)
file(GLOB_RECURSE CryptoNoteProtocol CryptoNoteProtocol/*)
file(GLOB_RECURSE Daemon Daemon/*)
file(GLOB_RECURSE Http HTTP/*)
file(GLOB_RECURSE InProcessNode InProcessNode/*)
file(GLOB_RECURSE Logging Logging/*)
file(GLOB_RECURSE Optimizer Optimizer/*)
file(GLOB_RECURSE NodeRpcProxy NodeRpcProxy/*)
file(GLOB_RECURSE P2p P2p/*)
file(GLOB_RECURSE Rpc Rpc/*)
file(GLOB_RECURSE Serialization Serialization/*)
file(GLOB_RECURSE SimpleWallet SimpleWallet/*)
file(GLOB_RECURSE Transfers Transfers/*)
file(GLOB_RECURSE Wallet Wallet/* BurnTransactionHandler.cpp)
file(GLOB_RECURSE WalletLegacy WalletLegacy/*)
file(GLOB_RECURSE JsonRpcServer JsonRpcServer/*)
file(GLOB_RECURSE PaymentGate PaymentGate/*)
file(GLOB_RECURSE PaymentGateService PaymentGateService/*)

# Eldernode services
add_subdirectory(EldernodeIndexManager)
add_subdirectory(BurnDepositValidationService)

# System files
if(WIN32)
  file(GLOB_RECURSE System System/* Platform/Windows/System/*)
elseif(APPLE)
  file(GLOB_RECURSE System System/* Platform/OSX/System/*)
else()
  file(GLOB_RECURSE System System/* Platform/Linux/System/*)
endif()

source_group("" FILES ${Common} ${Crypto} ${CryptoNoteCore} ${CryptoNoteProtocol} ${Daemon} ${JsonRpcServer} ${Http} ${Logging} ${NodeRpcProxy} ${P2p} ${Rpc} ${Serialization} ${SimpleWallet} ${System} ${Transfers} ${Wallet} ${WalletLegacy})

# --------------------------
# Libraries
# --------------------------
add_library(BlockchainExplorer STATIC ${BlockchainExplorer})
add_library(Common STATIC ${Common})
add_library(Crypto STATIC ${Crypto})
add_library(CryptoNoteCore STATIC ${CryptoNoteCore})
add_library(Http STATIC ${Http})
add_library(InProcessNode STATIC ${InProcessNode})
add_library(Logging STATIC ${Logging})
add_library(NodeRpcProxy STATIC ${NodeRpcProxy})
add_library(Rpc STATIC ${Rpc})
add_library(P2P STATIC ${CryptoNoteProtocol} ${P2p})
add_library(Serialization STATIC ${Serialization})
add_library(System STATIC ${System})
add_library(Transfers STATIC ${Transfers})
add_library(Wallet STATIC ${Wallet} ${WalletLegacy})
add_library(PaymentGate STATIC ${PaymentGate})
add_library(JsonRpcServer STATIC ${JsonRpcServer})

# --------------------------
# Apply AES/SSE compile options to Crypto library only (x86/x64 non-Android)
# --------------------------
if ((CMAKE_C_COMPILER_ID MATCHES "GNU|Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang|AppleClang")
    AND NOT ANDROID
    AND (CMAKE_SYSTEM_PROCESSOR MATCHES "x86|i[3-6]86|amd64|x86_64"))
    target_compile_options(Crypto PRIVATE -maes -msse2 -msse4.1)
endif()

# --------------------------
# Executables
# --------------------------
add_executable(Daemon ${Daemon})
add_executable(SimpleWallet ${SimpleWallet})
add_executable(PaymentGateService ${PaymentGateService})
add_executable(Optimizer ${Optimizer})

# --------------------------
# System library for Windows
# --------------------------
if (MSVC)
  target_link_libraries(System PRIVATE ws2_32)
endif ()

# --------------------------
# Link libraries (keyword form)
# --------------------------
target_link_libraries(Daemon PRIVATE
    CryptoNoteCore
    P2P
    Rpc
    System
    Http
    Logging
    Common
    Crypto
    upnpc-static
    BlockchainExplorer
    ${Boost_LIBRARIES}
    Serialization
)

target_link_libraries(SimpleWallet PRIVATE
    Wallet
    NodeRpcProxy
    Transfers
    Rpc
    Http
    CryptoNoteCore
    System
    Logging
    Common
    Crypto
    ${Boost_LIBRARIES}
    Serialization
)

target_link_libraries(PaymentGateService PRIVATE
    PaymentGate
    JsonRpcServer
    Wallet
    NodeRpcProxy
    Transfers
    CryptoNoteCore
    Crypto
    P2P
    Rpc
    Http
    System
    Logging
    Common
    InProcessNode
    upnpc-static
    BlockchainExplorer
    ${Boost_LIBRARIES}
    Serialization
)

target_link_libraries(Optimizer PRIVATE
    PaymentGate
    Rpc
    Http
    CryptoNoteCore
    Logging
    Serialization
    Crypto
    System
    Common
    ${Boost_LIBRARIES}
)

# --------------------------
# ICU linking fix for executables (macOS)
# --------------------------
if(APPLE)
    # Ensure ICU is linked on macOS via imported targets
    if(TARGET ICU::i18n AND TARGET ICU::uc AND TARGET ICU::data)
        foreach(exec_target Daemon PaymentGateService Optimizer)
            if(TARGET ${exec_target})
                message(STATUS "Fixing ICU linkage for ${exec_target} using ICU imported targets")
                target_link_libraries(${exec_target} PRIVATE ICU::i18n ICU::uc ICU::data)
            endif()
        endforeach()
    endif()
endif()

# --------------------------
# Additional Linux linking
# --------------------------
if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux" OR (APPLE AND NOT ANDROID))
  target_link_libraries(SimpleWallet PRIVATE -lresolv)
  target_link_libraries(Daemon PRIVATE -lresolv)
  target_link_libraries(PaymentGateService PRIVATE -lresolv)
endif ()

# --------------------------
# Dependencies
# --------------------------
add_dependencies(Rpc generate_version)
add_dependencies(Daemon generate_version)
add_dependencies(SimpleWallet generate_version)
add_dependencies(PaymentGateService generate_version)
add_dependencies(P2P generate_version)

# --------------------------
# Output names
# --------------------------
set_property(TARGET SimpleWallet PROPERTY OUTPUT_NAME "fuego-wallet-cli")
set_property(TARGET PaymentGateService PROPERTY OUTPUT_NAME "walletd")
set_property(TARGET Daemon PROPERTY OUTPUT_NAME "fuegod")
set_property(TARGET Optimizer PROPERTY OUTPUT_NAME "optimizer")
